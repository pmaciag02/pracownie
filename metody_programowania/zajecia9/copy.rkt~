#lang plait

; 4 x 4
; +---+---+---+---+
; |   | X |   |   |
; +---+---+---+---+
; |   |   |   | X |
; +---+---+---+---+
; | X |   |   |   |
; +---+---+---+---+
; |   |   | X |   |
; +---+---+---+---+

(define-type-alias (Stream 'a) (-> (StreamData 'a)))
(define-type (StreamData 'a)
  (sempty)
  (scons [head : 'a] [tail : ( Stream 'a )]))


(define (sappend xs ys)
  (if (sempty? (xs))
      ys
      (lambda()
        (scons (scons-head (xs)) (sappend (scons-tail (xs)) ys)))))

(define (concat xs)
  (if (sempty? (xs))
      (lambda() (sempty))
      (sappend (scons-head (xs)) (concat (scons-tail (xs))))))



(define (valid-pos? i board)
  (local
    [(define (valid-it i j k board)
       (type-case (Listof Number) board
         [empty #t]
         [(cons x board)
          (and (not (= i x))
               (not (= j x))
               (not (= k x))
               (valid-it (- i 1) j (+ k 1) board))]))]
    (valid-it (- i 1) i (+ i 1) board)))



(define (build-list-stream n f)
  (local
    [(define (foo t)
       (if (= t n)
           (lambda() (sempty))
           (lambda() (scons (f t) (foo (+ 1 t))))))]
    (foo 0)))


(define (queens n)
  (local
    [(define (queens-it board left)
       (if (= left 0)
           (lambda () (scons board (lambda () (sempty) )))
           (concat (build-list-stream n (lambda (i)
              (if (valid-pos? i board)
                  (queens-it (scons i board) (- left 1))
                  (lambda() (sempty))))))))]
    (queens-it '() n)))





